{"version":3,"sources":["SpeakingTest/VideoPlayer.js","App.jsx","index.js"],"names":["VideoPlayer","player","playerParams","isAutoPlayEnabled","setIsAutoPlayEnabled","handleProgress","useState","isPlaying","setIsPlaying","useEffect","current","play","pause","console","log","ref","width","height","playsInline","ontimeupdate","src","type","onClick","currentTime","App","React","createRef","playedSeconds","loadedSeconds","setPlayerParams","progress","alert","currentPlayedSeconds","Math","round","currentLoadedSeconds","ReactDOM","render","document","getElementById"],"mappings":"gOAGaA,G,MAAc,SAAC,GAMrB,IAAD,EALJC,EAKI,EALJA,OAGAC,GAEI,EAJJC,kBAII,EAHJC,qBAGI,EAFJF,cACAG,EACI,EADJA,eACI,EAO8BC,oBAAS,GAPvC,mBAOGC,EAPH,KAOcC,EAPd,KAqCJ,OA5BAC,qBAAU,YACHF,GAAaL,EAAaK,WAC7BC,GAAa,GACbP,EAAOS,QAAQC,QAENJ,IAAcL,EAAaK,YACpCC,GAAa,GACbP,EAAOS,QAAQE,WAGhB,CAACV,IAEJW,QAAQC,IAAI,cAAeP,GAsDzB,oCACA,8BACEQ,IAAKd,EACLe,MAAO,IACPC,OAAO,OAEPC,aAAW,EACXC,aAAcd,GANhB,8BAOgB,iBAAM,YAPtB,mBAQK,WARL,GAWE,4BACEe,IACE,0EAEFC,KAAK,2BAGL,4BAAQC,QAAS,kBAAMrB,EAAOS,QAAQa,YAAc,KAApD,gB,MClBOC,MAzEf,WACE,IAAMvB,EAASwB,IAAMC,UAAU,IADlB,EAEqCpB,oBAAS,GAF9C,mBAENH,EAFM,KAEaC,EAFb,OAG2BE,mBAAS,CAC/CC,WAAW,EACXoB,cAAe,GACfC,cAAe,KANJ,mBAGN1B,EAHM,KAGQ2B,EAHR,KA4Cb,OACE,oCACE,kBAAC,EAAD,CACE5B,OAAQA,EACRE,kBAAmBA,EACnBC,qBAAsBA,EACtBF,aAAcA,EACdG,eA1CiB,SAAAyB,GACrBC,MAAM,aAAcD,GAEpB,IAAME,EAAuBC,KAAKC,MAAMJ,GAClCK,EAAuBF,KAAKC,MAAMJ,EAASF,eAEjDC,EAAgB,2BACX3B,GADU,IAEbyB,cAAeK,EACfJ,cAAeO,QAmCf,2BAAIjC,EAAayB,gBACfxB,GACA,4BACEmB,QAAS,WAKPO,EAAgB,2BAAK3B,GAAN,IAAoBK,WAAW,OANlD,QAWQN,EAAOS,WC1EvB0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.43a4871f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactPlayer from 'react-player/file';\n\nexport const VideoPlayer = ({\n  player,\n  isAutoPlayEnabled,\n  setIsAutoPlayEnabled,\n  playerParams,\n  handleProgress,\n}) => {\n  const checkAutoPlay = () => {\n    if (!isAutoPlayEnabled) {\n      setIsAutoPlayEnabled(true);\n    }\n  };\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (!isPlaying && playerParams.isPlaying) {\n      setIsPlaying(true);\n      player.current.play();\n\n    } else if (isPlaying && !playerParams.isPlaying) {\n      setIsPlaying(false);\n      player.current.pause();\n\n    }\n  }, [playerParams]);\n\n  console.log('isPlayin---', isPlaying);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     if (!isPlaying) {\n  //       // player.current.pause();\n  //     } else {\n  //       player.current.play();\n  //     }\n  //   }, 1);\n  // }, [isPlaying]);\n  // const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n  // useEffect(() => {\n  //   player.current = document.getElementById (\"myVideo\");\n  // },[])\n  return (\n    // <ReactPlayer\n    //   ref={player}\n    //   className=\"react-player\"\n    //   // url='https://media.w3.org/2010/05/sintel/trailer_hd.mp4'\n    //   // url={url}\n    //   // url=\"https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8\"\n    //   controls={false}\n    //   // url=\"https://d1dgcz2mzc8ifr.cloudfront.net/speaking-test-3qs-jack/index.m3u8\"\n    //   url=\"https:///speaking-test-videos.s3.us-west-2.amazonaws.com/speaking-test-3qs-james/index.m3u8\"\n    //   width=\"320px\"\n    //   // height=\"600px\"\n    //   playing={playerParams.isPlaying}\n    //   playsinline={true}\n    //   // config={{\n    //   //   file: {\n    //   //     forceHLS: true,\n    //   //     forceVideo: true,\n    //   //     hlsVersion: '0.12.4',\n    //   //     attributes: {\n    //   //       // poster: feed && feed.actionUrl && feed.actionUrl.image,\n    //   //       disablePictureInPicture: true,\n    //   //     },\n    //   //   },\n    //   // }}\n    //   // onDuration={handleDuration}\n    //   // onProgress={handleProgress}\n    //   // starttime={12}\n    //   // onStart={20}\n    //   // start={12}\n    //   // end={22}\n    //   // muted={true}\n    //   onProgress={handleProgress}\n    //   onStart={checkAutoPlay}\n    //   // muted={true}\n    //   volume={0.1}\n    // />\n\n    <>\n    <video\n      ref={player}\n      width={600}\n      height=\"100%\"\n      // controls={true}\n      playsInline\n      ontimeupdate={handleProgress}\n      ontimeupdate={() => 'dasdsa'}\n      id=\"myVideo\"\n      // isPlaying={playerParams.isPlaying}\n    >\n      <source\n        src={\n          'https://d1dgcz2mzc8ifr.cloudfront.net/speaking-test-3qs-jack/index.m3u8'\n        }\n        type=\"application/x-mpegURL\"\n      />\n    </video>\n        <button onClick={() => player.current.currentTime = 10}>\n          go to 10s\n        </button>\n    </>\n  );\n};\n\n// export default VideoPlayer;\n","import React, { useEffect, useState } from 'react';\n// import TypeScriptDev from './TypeScriptDev.tsx';\n// import Player from './Player';\n// import VideoPart from './SpeakingTest/VideoPart/VideoPart';\n// import { AppCircle } from './Circle/AppCircle';\n// import { WaweSound } from './WaweSound/WaweSound';\n\n// import { Timer } from './Timer/Timer';\n\nimport { VideoPlayer } from './SpeakingTest/VideoPlayer.js';\nimport './App.scss';\n\nfunction App() {\n  const player = React.createRef({});\n  const [isAutoPlayEnabled, setIsAutoPlayEnabled] = useState(false);\n  const [playerParams, setPlayerParams] = useState({\n    isPlaying: false,\n    playedSeconds: '',\n    loadedSeconds: '',\n  });\n\n  const handleProgress = progress => {\n    alert('progress--', progress);\n    // const currentPlayedSeconds = Math.round(progress.playedSeconds);\n    const currentPlayedSeconds = Math.round(progress);\n    const currentLoadedSeconds = Math.round(progress.loadedSeconds);\n\n    setPlayerParams({\n      ...playerParams,\n      playedSeconds: currentPlayedSeconds,\n      loadedSeconds: currentLoadedSeconds,\n    });\n  };\n  // const [isPlaying, setIsPlaying] = useState(false);\n\n  // if (player.current) {\n  //   player.current.ontimeupdate = handleProgress;\n  // }\n\n  // useEffect(() => {\n  //   if (!isPlaying && playerParams.isPlaying) {\n  //     setIsPlaying(true);\n  //   } else if (isPlaying && !playerParams.isPlaying) {\n  //     setIsPlaying(false);\n  //   }\n  // }, [playerParams]);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     if (!isPlaying) {\n  //       // player.current.pause();\n  //     } else {\n  //       player.current.play();\n  //     }\n  //   }, 1);\n  // }, [isPlaying]);\n  return (\n    <>\n      <VideoPlayer\n        player={player}\n        isAutoPlayEnabled={isAutoPlayEnabled}\n        setIsAutoPlayEnabled={setIsAutoPlayEnabled}\n        playerParams={playerParams}\n        handleProgress={handleProgress}\n      />\n      <p>{playerParams.playedSeconds}</p>\n      {!isAutoPlayEnabled && (\n        <button\n          onClick={() => {\n            // setPlayerParams({ ...playerParams, isPlaying: false });\n            // setTimeout(() => {\n            //   setPlayerParams({ ...playerParams, isPlaying: true });\n            // }, 100);\n            setPlayerParams({ ...playerParams, isPlaying: true });\n\n            // player.current.play()\n          }}\n        >\n          Play {player.current}\n        </button>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nconst a = arg => arg - 2;\n"],"sourceRoot":""}